generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Graffiti {
  id          Int                  @id @default(autoincrement())
  name        String               @unique
  description String
  location    String
  createdAt   DateTime             @default(now())
  authorId    Int
  artists     ArtistToGraffiti[]
  categories  CategoryToGraffiti[]
  comment     Comment[]
  author      User                 @relation(fields: [authorId], references: [id])
  photos      GraffitiPhoto[]
  reports     Report[]
  tags        TagToGraffiti[]
}

model Category {
  id        Int                  @id @default(autoincrement())
  name      String               @unique
  graffitis CategoryToGraffiti[]
}

model CategoryToGraffiti {
  id         Int      @id @default(autoincrement())
  graffitiId Int
  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])
  graffiti   Graffiti @relation(fields: [graffitiId], references: [id])
}

model Comment {
  id         Int      @id @default(autoincrement())
  body       String
  createdAt  DateTime @default(now())
  userId     Int
  graffitiId Int
  graffiti   Graffiti @relation(fields: [graffitiId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Email {
  id       Int      @id @default(autoincrement())
  dateSent DateTime @default(now())
  subject  String
  body     String
  status   String
}

model EmailTemplate {
  name    String
  id      Int    @id @default(autoincrement())
  subject String
  body    String
}

model Tag {
  id          Int             @id @default(autoincrement())
  name        String          @unique
  description String
  graffitis   TagToGraffiti[]
}

model TagToGraffiti {
  id         Int      @id @default(autoincrement())
  graffitiId Int
  tagId      Int
  graffiti   Graffiti @relation(fields: [graffitiId], references: [id])
  tag        Tag      @relation(fields: [tagId], references: [id])
}

model GraffitiPhoto {
  id           Int      @id @default(autoincrement())
  graffitiId   Int
  graffiti     Graffiti @relation(fields: [graffitiId], references: [id])
  url          String   @unique
  addedAt      DateTime @default(now())
  userId       Int
  pictureScore Int?
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  password       String
  name           String
  lastname       String
  username       String          @unique
  refreshToken   String?
  comment        Comment[]
  posts          Graffiti[]
  graffitiPhotos GraffitiPhoto[]
  reports        Report[]
}

model Artist {
  id        Int                @id @default(autoincrement())
  name      String             @unique
  surname   String
  graffitis ArtistToGraffiti[]
}

model ArtistToGraffiti {
  id         Int      @id @default(autoincrement())
  graffitiId Int
  artistId   Int
  artist     Artist   @relation(fields: [artistId], references: [id])
  graffiti   Graffiti @relation(fields: [graffitiId], references: [id])
}

model Report {
  id           Int      @id @default(autoincrement())
  graffitiId   Int
  userId       Int
  createdAt    DateTime @default(now())
  reportReason String
  status       String
  comment      String?
  graffiti     Graffiti @relation(fields: [graffitiId], references: [id])
  user         User     @relation(fields: [userId], references: [id])
}
