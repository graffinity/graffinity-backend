name: backend continuous integration

permissions:
  id-token: write
  contents: read

on:
    push:
        branches: [master]
    pull_request:
        branches: [master]
    workflow_dispatch:
      
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
  REMOTE_USERNAME: ${{ secrets.REMOTE_USERNAME }}
  AWS_REMOTE_SSH_KEY: ${{ secrets.AWS_KEY_PAIR_SSH_KEY }}
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  REMOTE_PORT: 22

      
jobs:
  build:
    runs-on: ubuntu-latest
    services:
      actions-db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD:  postgres
          POSTGRES_DB: graffinity-ci
        ports:
          - 5432:5432

    steps:
      - name: Check out source code
        uses: actions/checkout@v3

      - name: Set up Node 16
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "npm"

      - name: Check code formatting w/ Prettier
        run: npx prettier --check .

      - name: Install dependencies
        run: npm ci
      
      - name: Run build
        run: npm run build

      - name: Clean and migrate the db
        run: npx prisma migrate reset --force
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/graffinity-ci


      - name: Run tests w/ Jest
        run: npm run test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/graffinity-ci

      - name: Try to build docker image
        run: |
          sh build.sh


  deploy:
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    needs: [ build ]

    steps:
    - name: Checkout out source code
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1      
      with:
        aws-access-key-id: ${{env.AWS_ACCESS_KEY_ID}}
        aws-secret-access-key: ${{env.AWS_SECRET_ACCESS_KEY}}
        aws-region: ${{env.AWS_REGION}}

    - name: Try to build and publish docker image
      run: |
        sh publish.sh

    - uses: Burnett01/rsync-deployments@5.2
      name: Add config/ folder to remote
      with:
        switches: -av --progress
        path: config/
        remote_path: ~/config
        remote_host: ${{env.REMOTE_HOST}}
        remote_user: ${{env.REMOTE_USERNAME}}
        remote_key: ${{env.AWS_REMOTE_SSH_KEY}}

      
    - uses: Burnett01/rsync-deployments@5.2
      name: Add start.sh script to remote
      with:
        switches: -av --progress
        path: start.sh
        remote_path: ~/start.sh
        remote_host: ${{env.REMOTE_HOST}}
        remote_user: ${{env.REMOTE_USERNAME}}
        remote_key: ${{env.AWS_REMOTE_SSH_KEY}}

    - uses: Burnett01/rsync-deployments@5.2
      name: Add docker-compose.yml to remote 
      with:
        switches: -av --progress
        path: docker-compose.yml
        remote_path: ~/docker-compose.yml
        remote_host: ${{env.REMOTE_HOST}}
        remote_user: ${{env.REMOTE_USERNAME}}
        remote_key: ${{env.AWS_REMOTE_SSH_KEY}}

    - name: Rebuild and start docker containers 
      uses: appleboy/ssh-action@master
      with:
        host: ${{env.REMOTE_HOST}}
        username: ${{env.REMOTE_USERNAME}}
        port: ${{env.REMOTE_PORT}}
        key: ${{env.AWS_REMOTE_SSH_KEY}}
        script_stop: true
        script: |
          sh start.sh
