generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GraffitiStatus {
  SUBMITTED
  PENDING
  APPROVED
  REJECTED
}

model Graffiti {
  id          Int                  @id @default(autoincrement())
  name        String               @unique
  description String
  latitude    String
  longitude   String
  status      GraffitiStatus       @default(SUBMITTED)
  createdAt   DateTime             @default(now())
  authorId    Int
  artists     ArtistToGraffiti[]
  categories  CategoryToGraffiti[]
  comment     Comment[]
  author      User                 @relation(fields: [authorId], references: [id])
  photos      GraffitiPhoto[]
  reports     Report[]
  tags        TagToGraffiti[]
}

model Category {
  id        Int                  @id @default(autoincrement())
  name      String               @unique
  graffitis CategoryToGraffiti[]
}

model CategoryToGraffiti {
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  graffiti   Graffiti @relation(fields: [graffitiId], references: [id])
  graffitiId Int

  @@id([graffitiId, categoryId])
}

model Comment {
  id         Int      @id @default(autoincrement())
  body       String
  createdAt  DateTime @default(now())
  userId     Int
  graffitiId Int
  graffiti   Graffiti @relation(fields: [graffitiId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
}

model Email {
  id       Int      @id @default(autoincrement())
  dateSent DateTime @default(now())
  subject  String
  body     String
  status   String
}

model EmailTemplate {
  name    String
  id      Int    @id @default(autoincrement())
  subject String
  body    String
}

model Tag {
  id          Int             @id @default(autoincrement())
  name        String          @unique
  description String
  graffitis   TagToGraffiti[]
}

model TagToGraffiti {
  graffiti   Graffiti @relation(fields: [graffitiId], references: [id])
  graffitiId Int
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      Int

  @@id([graffitiId, tagId])
}

model GraffitiPhoto {
  id           Int      @id @default(autoincrement())
  graffitiId   Int
  graffiti     Graffiti @relation(fields: [graffitiId], references: [id])
  url          String   @unique
  addedAt      DateTime @default(now())
  userId       Int
  pictureScore Int?
  user         User     @relation(fields: [userId], references: [id])
  likes        Likes[]
}

model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  password       String
  name           String
  lastname       String
  username       String          @unique
  refreshToken   String?
  comment        Comment[]
  posts          Graffiti[]
  graffitiPhotos GraffitiPhoto[]
  reports        Report[]
  likes          Likes[]
  // roles          RoleToUser[]
}

model Artist {
  id        Int                @id @default(autoincrement())
  name      String             @unique
  surname   String
  graffitis ArtistToGraffiti[]
}

model ArtistToGraffiti {
  graffiti   Graffiti @relation(fields: [graffitiId], references: [id])
  graffitiId Int
  artist     Artist   @relation(fields: [artistId], references: [id])
  artistId   Int

  @@id([graffitiId, artistId])
}

model Report {
  id           Int      @id @default(autoincrement())
  graffitiId   Int
  userId       Int
  createdAt    DateTime @default(now())
  reportReason String
  status       String
  comment      String?
  graffiti     Graffiti @relation(fields: [graffitiId], references: [id])
  user         User     @relation(fields: [userId], references: [id])
}

model Likes {
  user            User          @relation(fields: [userId], references: [id])
  userId          Int
  graffitiPhoto   GraffitiPhoto @relation(fields: [graffitiPhotoId], references: [id])
  graffitiPhotoId Int

  @@id([userId, graffitiPhotoId])
}

// enum RoleEnum {
//   ADMIN
//   USER
// }

// model Role {
//   id    Int          @id @default(autoincrement())
//   name  RoleEnum     @unique
//   users RoleToUser[]
// }

// model RoleToUser {
//   user   User @relation(fields: [userId], references: [id])
//   userId Int
//   role   Role @relation(fields: [roleId], references: [id])
//   roleId Int

//   @@id([userId, roleId])
// }
