name: backend continuous integration

permissions:
  id-token: write
  contents: read

on:
    push:
        branches: [master]
    pull_request:
        branches: [master]
    workflow_dispatch:
      
env:
  REMOTE_KEY: ${{ secrets.AWS_KEY_PAIR_SSH_KEY }}
  AWS_USERNAME: ${{ secrets.AWS_USERNAME }}
  AWS_ECR_ENDPOINT: ${{ secrets.AWS_ECR_ENDPOINT }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
  REMOTE_USERNAME: ${{ secrets.REMOTE_USERNAME }}
  PRIVATE_SSH_KEY: ${{ secrets.PERSONAL_SSH_PRIVATE_KEY }}
  AWS_REMOTE_SSH_KEY: ${{ secrets.AWS_KEY_PAIR_SSH_KEY }}
  DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/graffinity-ci"
  REMOTE_PORT: 22

      
jobs:
  build:
    runs-on: ubuntu-latest
    services:
      actions-db:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD:  postgres
          POSTGRES_DB: graffinity-ci
        ports:
          - 5432:5432

    steps:
      - name: Check out source code
        uses: actions/checkout@v3

      - name: Set up Node 16
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: "npm"

      - name: Check code formatting w/ Prettier
        run: npx prettier --check .

      - name: Install dependencies
        run: npm ci
      
      - name: Run build
        run: npm run build --if-present

      - name: Clean and migrate the db
        run: npx prisma migrate reset --force


      - name: Run tests w/ Jest
        run: npm run test

      - name: Try to build docker image
        run: |
          sh build.sh

  deploy:
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{env.AWS_ACCESS_KEY_ID}}
        aws-secret-access-key: ${{env.AWS_SECRET_ACCESS_KEY}}
        aws-region: ${{env.AWS_REGION}}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Install SSH Key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{env.AWS_REMOTE_SSH_KEY}}
        known_hosts: 'just-a-placeholder-so-we-dont-get-errors' 


    - name: Adding Known Hosts
      run: ssh-keyscan -H ${{env.REMOTE_HOST}} >> ~/.ssh/known_hosts

    - name: Try to build and publish docker image
      run: |
        sh publish.sh

    - uses: Burnett01/rsync-deployments@5.2
      name: Add config/ folder to remote
      with:
        # switches: -av --progress -e 'ssh -i graffinity.pem'
        switches: -av --progress
        path: config/
        remote_path: ~/config
        remote_host: ${{env.REMOTE_HOST}}
        remote_user: ${{env.REMOTE_USERNAME}}
        remote_key: ${{env.PRIVATE_SSH_KEY}}
        remote_key_pass: ${{ secrets.PERSONAL_SSH_KEY_PASSPHRASE }}

    # - name: Copy file to remote via ssh
    #   uses: appleboy/scp-action@v0.0.1

    # - uses: Burnett01/rsync-deployments@5.2
    #   name: Add start.sh script to remote
    #   with:
    #     switches: -a
    #     path: start.sh
    #     remote_path: ~/start.sh
    #     remote_host: ${{env.REMOTE_HOST}}
    #     remote_user: ${{env.REMOTE_USERNAME}}
    #     remote_key: ${{env.REMOTE_KEY}}
        # remote_key_pass: ${{env.REMOTE_PASSPHRASE}}
      

    - uses: Burnett01/rsync-deployments@5.2
      name: Add start.sh script to remote
      with:
        switches: -a
        path: start.sh
        remote_path: ~/start.sh
        remote_host: ${{env.REMOTE_HOST}}
        remote_user: ${{env.REMOTE_USERNAME}}
        remote_key: ${{ secrets.PERSONAL_SSH_PRIVATE_KEY }}
        remote_key_pass: ${{ secrets.PERSONAL_SSH_KEY_PASSPHRASE }}

    - uses: Burnett01/rsync-deployments@5.2
      name: Add docker-compose.prod.yml to remote 
      with:
        switches: -a
        path: docker-compose.prod.yml
        remote_path: ~/docker-compose.yml
        remote_host: ${{env.REMOTE_HOST}}
        remote_user: ${{env.REMOTE_USERNAME}}
        remote_key: ${{env.PRIVATE_SSH_KEY}}
        remote_key_pass: ${{ secrets.PERSONAL_SSH_KEY_PASSPHRASE }}

    - name: Rebuild and start docker containers 
      uses: appleboy/ssh-action@master
      with:
        host: ${{env.REMOTE_HOST}}
        username: ${{env.REMOTE_USERNAME}}
        port: ${{env.REMOTE_PORT}}
        key: ${{env.PRIVATE_SSH_KEY}}
        passphrase: ${{ secrets.PERSONAL_SSH_KEY_PASSPHRASE }}
        script_stop: true
        script: |
          sh start.sh
